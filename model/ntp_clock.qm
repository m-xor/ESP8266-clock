<?xml version="1.0" encoding="UTF-8"?>
<model version="4.3.0" links="0">
 <documentation>Simple model template for QP/C</documentation>
 <framework name="qpc"/>
 <package name="Events" stereotype="0x01">
  <class name="MyEvt" superclass="qpc::QEvt">
   <documentation>/* example event object */</documentation>
   <attribute name="attr1" type="uint8_t" visibility="0x00" properties="0x00"/>
  </class>
  <class name="Class1" superclass="qpc::QEvt">
   <documentation>/* second example */</documentation>
   <attribute name="attr1" type="uint16_t" visibility="0x00" properties="0x00"/>
  </class>
 </package>
 <package name="AOs" stereotype="0x02">
  <class name="QTask" superclass="qpc::QHsm">
   <documentation>/*Task abstract class*/</documentation>
   <attribute name="queue" type="void *" visibility="0x00" properties="0x00">
    <documentation>/*Pointer to FreeRTOS task queue*/</documentation>
   </attribute>
  </class>
  <class name="Clock" superclass="AOs::QTask">
   <documentation>/*Application */</documentation>
   <statechart>
    <initial target="../1">
     <initial_glyph conn="6,2,5,0,11,10">
      <action box="0,-2,10,2"/>
     </initial_glyph>
    </initial>
    <state name="running">
     <documentation>/* Application is runnig normally */</documentation>
     <tran trig="BUTTON" target="../../2">
      <tran_glyph conn="19,18,1,3,9">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="3,12,16,22"/>
    </state>
    <state name="configuration">
     <documentation>/* Clock configuration phase: httpd is active, wifi in AP+STA  mode */</documentation>
     <entry>//start_ap();
display_led(DISPLAY_HTTP_ACTIVE, DISPLAY_LED_ON);</entry>
     <exit>//stop_ap();
display_led(DISPLAY_HTTP_ACTIVE, DISPLAY_LED_OFF);</exit>
     <tran trig="TIMEOUT" target="../../1">
      <tran_glyph conn="28,26,3,1,-9">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="28,12,16,22">
      <entry box="1,2,6,2"/>
      <exit box="1,4,6,2"/>
     </state_glyph>
    </state>
    <state_diagram size="80,50"/>
   </statechart>
  </class>
  <attribute name="theClock" type="QHsm * const" visibility="0x00" properties="0x00">
   <documentation>/*pointer to static instance of the Clock */</documentation>
   <code>= &amp;l_clock.super.super;</code>
  </attribute>
  <operation name="Clock_ctor" type="void" visibility="0x00" properties="0x00">
   <documentation>/*Clock constructor */</documentation>
   <parameter name="queue" type="void *"/>
   <code>QHsm_ctor(&amp;l_clock.super.super, Q_STATE_CAST(&amp;Clock_initial));
Q_ASSERT( queue != (void*)0 );
l_clock.super.queue = queue;</code>
  </operation>
 </package>
 <directory name="../project/components/qpc/app">
  <file name="project.h" codec="UTF-8">
   <text>#ifndef project_h
#define project_h

/* define the event signals used in the application ------------------------*/
enum ProjectSignals {
    MAX_PUB_SIG  = Q_USER_SIG,   /* we can't use publish-subscribe machanism */
    BUTTON_SIG,
    TIMEOUT_SIG,
    MAX_SIG                     /* the last signal */
};


$declare(Events)

/* to satisfy freeRTOS queue */
typedef union  {
    QEvt qevt;
    MyEvt myevt;
    Class1 class1evt;
} ProjectEvents;

/* abstract class ------------------- */
$declare(AOs::QTask)
/* ---------------------------------------- */

$declare(AOs::theClock)

$declare(AOs::Clock_ctor)

/* declare other elements... */

#endif /* project_h */</text>
  </file>
  <file name="clock.c" codec="UTF-8">
   <text>#include &quot;qep_port.h&quot;
#include &quot;qassert.h&quot;
#include &quot;display.h&quot;
#include &quot;project.h&quot;

Q_DEFINE_THIS_FILE

/* local objects -----------------------------------------------------------*/

$declare(AOs::Clock)

static Clock l_clock;  /* the instance of the Clock State Machine */

/* Public-scope objects ----------------------------------------------------*/

$define(AOs::theClock)

$define(AOs::Clock_ctor)

/* Active object definition ================================================*/

$define(AOs::Clock)</text>
  </file>
 </directory>
</model>
